<?php

require_once('../ArticleFunctions.php');

/** IMPORTANT!!!
 * TO TEST THIS CLASS ArticleFunctins.php MUST BE MOVED TO THE Source Files FOLDER 
 */

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-05-02 at 06:14:58.
 */
class ArticleFunctionsTest extends PHPUnit_Framework_TestCase {

    /**
     * @var ArticleFunctions
     */
    protected $articleFunction;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->articleFunction = new ArticleFunctions;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        unset($this->articleFunction);
    }


    /**
     * @covers ArticleFunctions::findLink
     * @todo   Implement testFindLink().
     */
    public function testFindLink() 
    {
        $noLink = "This is a String of text with no link";
        $link = "this is a string of text with a link https://www.google.ie the link should be replace with a href";
        
        $hrefLink = 'this is a string of text with a link <a href="https://www.google.ie">https://www.google.ie</a> the link should be replace with a href';
        
        echo $this->articleFunction->findLink($hrefLink) ."<br>";
        echo $hrefLink;
        $this->assertEquals($noLink, $this->articleFunction->findLink($noLink));//should be the sam if text doesnt contain a link
        $this->assertEquals($hrefLink, $this->articleFunction->findLink($link));
        
    }


    public function testRemoveDuplicates() {
        $duplicates = array(1, 2, 3, 4, 5, 5, 4, 3, 2, 1);
        $noDups = array(1, 2, 3, 4, 5);
        
        $this->assertEquals($noDups, $this->articleFunction->removeDuplicates($duplicates));
        
    }

    /**
     * @covers ArticleFunctions::checkCategory
     * @todo   Implement testCheckCategory().
     */
    public function testCheckCategory() {
        $article = new Article(1, "Michael", "Title", "Science", "Body", 1, 5, "ImageLink", "tags");

        $this->assertTrue($this->articleFunction->checkCategory("Science", $article));
        $this->assertFalse($this->articleFunction->checkCategory("Technology", $article));
    }

    /**
     * @covers ArticleFunctions::checkWord
     * @todo   Implement testCheckWord().
     */
    public function testCheckWord() {
        
        $article = new Article(1, "Michael", "Title", "Science", "Body that contains a specific word to check", 1, 5, "ImageLink", "tags");

        $this->assertTrue($this->articleFunction->checkWord("contains", $article));
        $this->assertFalse($this->articleFunction->checkWord("coontaains", $article));
        
    }

    /**
     * @covers ArticleFunctions::containsKeyWords
     * @todo   Implement testContainsKeyWords().
     */
    public function testContainsKeyWords() {
        $article = new Article(1, "Michael", "Title", "Science", "Body that contains a specific word to check like sleep", 1, 5, "ImageLink", "tags");
        $keyWords = array("student", "sleep", "deprivation");
        $this->assertTrue($this->articleFunction->containsKeyWords($keyWords, $article));
        unset($keyWords[1]);
        $this->assertFalse($this->articleFunction->containsKeyWords($keyWords, $article));
    }

    /**
     * @covers ArticleFunctions::checkCategorys
     * @todo   Implement testCheckCategorys().
     */
    public function testCheckCategorys() {
        $article = new Article(1, "Michael", "Title", "Tecnology", "Body", 1, 5, "ImageLink", "tags");
        $categorys = array("Science", "Tecnology", "Enginnering", "Health");
        
        $this->assertTrue($this->articleFunction->CheckCategorys($categorys, $article));
        unset($categorys[1]);
        $this->assertFalse($this->articleFunction->CheckCategorys($categorys, $article));
    }

    /**
     * @covers ArticleFunctions::checkTag
     * @todo   Implement testCheckTag().
     */
    public function testCheckTag() {
         $article = new Article(1, "Michael", "Title", "Tecnology", "Body", 1, 5, "ImageLink", "tags");
        $this->assertTrue($this->articleFunction->CheckTag("tags", $article));
        $this->assertFalse($this->articleFunction->CheckTag("Word", $article));
    }

    /**
     * @covers ArticleFunctions::checkTags
     * @todo   Implement testCheckTags().
     */
    public function testCheckTags() {
        $article = new Article(1, "Michael", "Title", "Tecnology", "Body", 1, 5, "ImageLink", "tags, words");
        $tags= "tags, coffee, Bacon, eggs";
        
        $this->assertTrue($this->articleFunction->CheckTags($tags, $article));
        
        $tags= "coffee, Bacon, eggs";
        
        $this->assertFalse($this->articleFunction->CheckTags($tags, $article));
    }


    /**
     * @covers ArticleFunctions::getTagsArray
     * @todo   Implement testGetTagsArray().
     */
    public function testGetTagsArray() {
        $tags= array("coffee", "Bacon", "eggs");
        $article = new Article(1, "Michael", "Title", "Tecnology", "Body", 1, 5, "ImageLink", "coffee,Bacon,eggs");
        $this->assertEquals($tags, $this->articleFunction->GetTagsArray($article));
    }

}
